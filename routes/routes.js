const timestamp=require("time-stamp"),{nanoid:e}=require("nanoid"),express=require("express"),path=require("path"),fs=require("fs");require("dotenv").config();const API_KEY=process.env.API_KEY,KEY=process.env.KEY,router=express.Router(),{verify:t,schemaValidator:s,Encryption:n,Decryption:r}=require("../utils/helpers");router.get("/",(e,t)=>{t.sendStatus(400)}),router.get("/document/:document",(e,s)=>{let n=e.query.key,o=e.params.document;if(!1!==t(o)){if(n===API_KEY)try{let u=JSON.parse(fs.readFileSync(path.resolve(__dirname,`../documents/${o}/data.json`),"utf-8")),a=[];u.forEach(e=>{a.push(JSON.parse(new r(e.encrypted,KEY).decrypted))}),s.status(200).json(a)}catch(d){s.sendStatus(500)}else s.status(400).json({error:"invalid api key!"})}else s.status(400).json({error:"document not found!"})}),router.post("/document/:document",(r,o)=>{let u=r.params.document,a=r.query.key;if(!1!==t(u)){if(a===API_KEY){let d=r.body,{schema:i}=require(`../documents/${u}/document`);if(0!==Object.keys(d).length){let m=Object.keys(d);if(s(i,d)){let{addEntry:c}=require(`../documents/${u}/document`),l=e(8);(formattedEntry=Object.assign({id:l},d)).timestamp=timestamp("YYYY/MM/DD HH:mm:ss"),c(new n(l,JSON.stringify(formattedEntry),KEY)),o.status(200).json({status:"success",message:"entry added",entry:formattedEntry})}else o.status(400).json({error:"invalid entry structure",schema:{required:i,used:m}})}else o.status(400).json({message:"entry cannot be an empty object!"})}else o.status(400).json({error:"invalid api key!"})}}),router.delete("/document/:document",(e,s)=>{let n=e.params.document,r=e.query.key;if(!1!==t(n)){if(r===API_KEY){let o=e.body.index||e.query.index;if(void 0!==o){let{removeEntry:u}=require(`../documents/${n}/document`);u(o),s.status(200).json({status:"success",message:"entry deleted!"})}else s.status(400).json({error:"index is undefined!"})}else s.status(400).json({error:"invalid api key!"})}}),module.exports=router;