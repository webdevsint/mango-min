const prompts=require("prompts"),path=require("path"),fs=require("fs"),data=fs.readFileSync(path.resolve(__dirname,"../utils/boilerplate.txt"),"utf8"),confirmName=async e=>{let t={type:"text",name:"confirmation",message:`are you sure with the name "${e}": (y/n)`,intial:"yes"},a=await prompts(t);"y"===a.confirmation||"yes"===a.confirmation?await setSchema(e):await setName()},confirmSchema=async(e,t)=>{let a={type:"text",name:"confirmation",message:"is this the correct schema: (y/n) "};console.log(t);let s=await prompts(a);if("y"===s.confirmation||"yes"===s.confirmation){let m=require("../documents/list");m.push(e);let i=data.replace("${SCHEMA}",JSON.stringify(t));fs.mkdirSync(path.resolve(__dirname,"../documents/",e)),fs.writeFileSync(path.resolve(__dirname,"../documents/",e,"document.js"),i),fs.writeFileSync(path.resolve(__dirname,"../documents/",e,"data.json"),"[]"),fs.writeFileSync(path.resolve(__dirname,"../documents/list.js"),`const list=${JSON.stringify(m)};module.exports=list;`),console.log("document created!")}else await setSchema()},setName=async()=>{let e={type:"text",name:"name",message:"document name: "},t=await prompts(e);console.log(await confirmName(t.name.trim()))},setSchema=async e=>{let t={type:"text",name:"schema",message:"document schema: (seperate values with space) "},a=await prompts(t),s=a.schema.split(" ").filter(e=>e);await confirmSchema(e,s)};setName();